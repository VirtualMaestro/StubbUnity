def testFolder = "..\\StubbExample\\StubbExample\\Assets\\Libs\\"

task cleanBefore (type: Delete) {
    println 'Cleanup before build'
    delete 'build', 'StubbUnity.zip'
}

task cleanAfter (type: Delete) {
    println 'Cleanup after build'
    delete 'build'
}

task copySrc (type: Copy) {
    println 'Create Stubb package'
    
    from "."
    
    include "ecs-unityintegration/"
    include "leoecs/"
    include "remotedebug/"
    include "ecs-ui/"
    include "StubbUnity/StubbUnity/Src/"
    
    exclude '**/*.gradle'
    exclude 'build'
    exclude '**/*.git'

    into "build/Stubb"
}

task cleanupTestFolder (type: Delete) {
    println 'Cleanup test folder'
    delete testFolder
}

task copyToTestFolder (type: Copy) {
    println 'Copy Stubb to test folder'

    from "build"
    into testFolder
}

task createZip (type: Zip) {
    println 'Create ZIP package'

    archiveFileName = "StubbUnity.zip"
    destinationDirectory = file(".")

    from "build"
}

task build () {
    dependsOn 'cleanBefore'
    dependsOn 'copySrc'
    dependsOn 'createZip'
    dependsOn 'cleanAfter'

    tasks.findByName('copySrc').mustRunAfter 'cleanBefore'
    tasks.findByName('createZip').mustRunAfter 'copySrc'
    tasks.findByName('cleanAfter').mustRunAfter 'createZip'

    println 'Package StubbUnity.zip has been created!'
}

task testDeploy () {
    dependsOn 'cleanBefore'
    dependsOn 'copySrc'
    dependsOn 'cleanupTestFolder'
    dependsOn 'copyToTestFolder'
    dependsOn 'cleanAfter'

    tasks.findByName('copySrc').mustRunAfter 'cleanBefore'
    tasks.findByName('cleanupTestFolder').mustRunAfter 'copySrc'
    tasks.findByName('copyToTestFolder').mustRunAfter 'cleanupTestFolder'
    tasks.findByName('cleanAfter').mustRunAfter 'copyToTestFolder'

    println 'New Stubb has been copied to the test folder'
}