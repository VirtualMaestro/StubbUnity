def sourceFolder = file("$rootDir")
def templateProjectPath = file("../EcsProjectTemplate/ProjectFiles/Assets/Libs/")
//def exampleProjectPath = file("../StubbExample/StubbExample/Assets/Libs/")
def exampleProjectPath = file("../BubbleShooter/BubbleShooter/Assets/Libs/")
def frameworkFolderName = "Stubb"
def zipFilename = "${frameworkFolderName}.zip"
def buildDirName = "build"

task cleanTemplateProjectFolder(type: Delete) {
    println "Clean folder $templateProjectPath"

    delete "$templateProjectPath/$frameworkFolderName"
}

task cleanExampleProjectFolder(type: Delete) {
    println "Clean folder $exampleProjectPath"

    delete "$exampleProjectPath/$frameworkFolderName"
}

task copyToTemplate(type: Copy) {
    println "Copy files from $buildDirName to $templateProjectPath"

    from buildDirName
    into templateProjectPath

    include "$frameworkFolderName/"
}

task copyToExample(type: Copy) {
    println "Copy files from $buildDirName to $exampleProjectPath"

    from buildDirName
    into exampleProjectPath

    include "$frameworkFolderName/"
}

task collectSources(type: Copy) {
    println "Filter and Copy source to the build folder!"

    from sourceFolder

    include 'ecs-unityintegration/'
    include 'leoecs/'
    include 'remotedebug/'
    include 'ecs-ui/'
    include 'StubbUnity/StubbUnity/Src/'

    exclude '**/*.gradle'
    exclude buildDirName
    exclude '**/*.git'

    if (!file(buildDirName).exists()) {
        mkdir buildDirName
    }

    into "$buildDirName/$frameworkFolderName"
}

task createZip(type: Zip) {
    println "Create ZIP file"

    archiveFileName = zipFilename
    destinationDirectory = file(sourceFolder)

    from buildDirName
}

task cleanBuild(type: Delete) {
    println "Cleanup build folder!"

    def zipPath = "$sourceFolder/$zipFilename"
    if (file(zipPath).exists()) {
        delete zipPath
    }

    def buildDirPath = "$sourceFolder/$buildDirName/$frameworkFolderName"
    if (file(buildDirPath).exists()) {
        delete buildDirPath
    }
}

task cleanAll(dependsOn: [cleanBuild, cleanTemplateProjectFolder, cleanExampleProjectFolder]) {
    println "All projects are cleaned!"
}

task build(dependsOn: [cleanBuild, collectSources, createZip]) {
    println "Stubb package has been created!"
}

task deployToTemplate(dependsOn: [cleanBuild, collectSources, cleanTemplateProjectFolder, copyToTemplate]) {
    println "Deployed to the Template project!"
}

task deployToExample(dependsOn: [cleanBuild, collectSources, cleanExampleProjectFolder, copyToExample]) {
    println "Deployed to the Example project!"
}